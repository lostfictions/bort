short-term:

// interface StoreShape {
//   wordBank: { [word: string]: { [followedBy: string]: number } };

//   /**
//    * a cache of recent responses to avoid repetition.
//    *
//    * maps from response -> time sent (in ms from epoch)
//    */
//   recents: { [uri: string]: number };

//   /**
//    * maps usernames to a tuple of the last message that user sent
//    * and the date it was sent (in ms from epoch)
//    */
//   seen: { [username: string]: SeenData };
// }

// interface Store {
//   getMarkov(word: string): Promise<{ [nextWord: string]: number }>;
//   getMarkovPrev(word: string): Promise<{ [prevWord: string]: number }>;
//   getRecents(): Promise<{ [recent: string]: number }>;
//   getSeen(
//     user: string
//   ): Promise<{ time: number; message: string; channel: string }>;
// }


- reminder command

----------------------------------------------------

- cleanup messages? (eg. confirmations will disappear after 10 seconds; poor
  man's emulation of slack bot messages only visible to the user who invoked the
  command)

- undo!

---------------------------------------------------------------

- dynamically import command list; make configurable via env vars
- allow commands to be automatically disabled if eg. api keys are missing

- document commands usage

- reinstate radio command for discord
